// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  medication: (where?: MedicationWhereInput) => Promise<boolean>;
  patientinfo: (where?: PatientinfoWhereInput) => Promise<boolean>;
  roomallocate: (where?: RoomallocateWhereInput) => Promise<boolean>;
  roominfo: (where?: RoominfoWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  medication: (where: MedicationWhereUniqueInput) => MedicationNullablePromise;
  medications: (args?: {
    where?: MedicationWhereInput;
    orderBy?: MedicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Medication>;
  medicationsConnection: (args?: {
    where?: MedicationWhereInput;
    orderBy?: MedicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MedicationConnectionPromise;
  patientinfo: (
    where: PatientinfoWhereUniqueInput
  ) => PatientinfoNullablePromise;
  patientinfoes: (args?: {
    where?: PatientinfoWhereInput;
    orderBy?: PatientinfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Patientinfo>;
  patientinfoesConnection: (args?: {
    where?: PatientinfoWhereInput;
    orderBy?: PatientinfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PatientinfoConnectionPromise;
  roomallocate: (
    where: RoomallocateWhereUniqueInput
  ) => RoomallocateNullablePromise;
  roomallocates: (args?: {
    where?: RoomallocateWhereInput;
    orderBy?: RoomallocateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Roomallocate>;
  roomallocatesConnection: (args?: {
    where?: RoomallocateWhereInput;
    orderBy?: RoomallocateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoomallocateConnectionPromise;
  roominfo: (where: RoominfoWhereUniqueInput) => RoominfoNullablePromise;
  roominfoes: (args?: {
    where?: RoominfoWhereInput;
    orderBy?: RoominfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Roominfo>;
  roominfoesConnection: (args?: {
    where?: RoominfoWhereInput;
    orderBy?: RoominfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoominfoConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createMedication: (data: MedicationCreateInput) => MedicationPromise;
  updateMedication: (args: {
    data: MedicationUpdateInput;
    where: MedicationWhereUniqueInput;
  }) => MedicationPromise;
  updateManyMedications: (args: {
    data: MedicationUpdateManyMutationInput;
    where?: MedicationWhereInput;
  }) => BatchPayloadPromise;
  upsertMedication: (args: {
    where: MedicationWhereUniqueInput;
    create: MedicationCreateInput;
    update: MedicationUpdateInput;
  }) => MedicationPromise;
  deleteMedication: (where: MedicationWhereUniqueInput) => MedicationPromise;
  deleteManyMedications: (where?: MedicationWhereInput) => BatchPayloadPromise;
  createPatientinfo: (data: PatientinfoCreateInput) => PatientinfoPromise;
  updatePatientinfo: (args: {
    data: PatientinfoUpdateInput;
    where: PatientinfoWhereUniqueInput;
  }) => PatientinfoPromise;
  updateManyPatientinfoes: (args: {
    data: PatientinfoUpdateManyMutationInput;
    where?: PatientinfoWhereInput;
  }) => BatchPayloadPromise;
  upsertPatientinfo: (args: {
    where: PatientinfoWhereUniqueInput;
    create: PatientinfoCreateInput;
    update: PatientinfoUpdateInput;
  }) => PatientinfoPromise;
  deletePatientinfo: (where: PatientinfoWhereUniqueInput) => PatientinfoPromise;
  deleteManyPatientinfoes: (
    where?: PatientinfoWhereInput
  ) => BatchPayloadPromise;
  createRoomallocate: (data: RoomallocateCreateInput) => RoomallocatePromise;
  updateRoomallocate: (args: {
    data: RoomallocateUpdateInput;
    where: RoomallocateWhereUniqueInput;
  }) => RoomallocatePromise;
  updateManyRoomallocates: (args: {
    data: RoomallocateUpdateManyMutationInput;
    where?: RoomallocateWhereInput;
  }) => BatchPayloadPromise;
  upsertRoomallocate: (args: {
    where: RoomallocateWhereUniqueInput;
    create: RoomallocateCreateInput;
    update: RoomallocateUpdateInput;
  }) => RoomallocatePromise;
  deleteRoomallocate: (
    where: RoomallocateWhereUniqueInput
  ) => RoomallocatePromise;
  deleteManyRoomallocates: (
    where?: RoomallocateWhereInput
  ) => BatchPayloadPromise;
  createRoominfo: (data: RoominfoCreateInput) => RoominfoPromise;
  updateRoominfo: (args: {
    data: RoominfoUpdateInput;
    where: RoominfoWhereUniqueInput;
  }) => RoominfoPromise;
  updateManyRoominfoes: (args: {
    data: RoominfoUpdateManyMutationInput;
    where?: RoominfoWhereInput;
  }) => BatchPayloadPromise;
  upsertRoominfo: (args: {
    where: RoominfoWhereUniqueInput;
    create: RoominfoCreateInput;
    update: RoominfoUpdateInput;
  }) => RoominfoPromise;
  deleteRoominfo: (where: RoominfoWhereUniqueInput) => RoominfoPromise;
  deleteManyRoominfoes: (where?: RoominfoWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  medication: (
    where?: MedicationSubscriptionWhereInput
  ) => MedicationSubscriptionPayloadSubscription;
  patientinfo: (
    where?: PatientinfoSubscriptionWhereInput
  ) => PatientinfoSubscriptionPayloadSubscription;
  roomallocate: (
    where?: RoomallocateSubscriptionWhereInput
  ) => RoomallocateSubscriptionPayloadSubscription;
  roominfo: (
    where?: RoominfoSubscriptionWhereInput
  ) => RoominfoSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MedicationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "Medicalrounds_ASC"
  | "Medicalrounds_DESC"
  | "Discharge_ASC"
  | "Discharge_DESC";

export type PatientinfoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "Patientname_ASC"
  | "Patientname_DESC"
  | "PatientAddress_ASC"
  | "PatientAddress_DESC"
  | "PatientGender_ASC"
  | "PatientGender_DESC"
  | "PatientPhonenumber_ASC"
  | "PatientPhonenumber_DESC"
  | "PatientBloodgroup_ASC"
  | "PatientBloodgroup_DESC"
  | "PatientSymptoms_ASC"
  | "PatientSymptoms_DESC"
  | "Roomallocated_ASC"
  | "Roomallocated_DESC"
  | "Discharged_ASC"
  | "Discharged_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RoomallocateOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "Patientstatus_ASC"
  | "Patientstatus_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RoominfoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "Status_ASC"
  | "Status_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type MedicationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MedicationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  Patient?: Maybe<PatientinfoWhereInput>;
  Medicalrounds?: Maybe<Int>;
  Medicalrounds_not?: Maybe<Int>;
  Medicalrounds_in?: Maybe<Int[] | Int>;
  Medicalrounds_not_in?: Maybe<Int[] | Int>;
  Medicalrounds_lt?: Maybe<Int>;
  Medicalrounds_lte?: Maybe<Int>;
  Medicalrounds_gt?: Maybe<Int>;
  Medicalrounds_gte?: Maybe<Int>;
  Discharge?: Maybe<Boolean>;
  Discharge_not?: Maybe<Boolean>;
  AND?: Maybe<MedicationWhereInput[] | MedicationWhereInput>;
  OR?: Maybe<MedicationWhereInput[] | MedicationWhereInput>;
  NOT?: Maybe<MedicationWhereInput[] | MedicationWhereInput>;
}

export interface PatientinfoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  Patientname?: Maybe<String>;
  Patientname_not?: Maybe<String>;
  Patientname_in?: Maybe<String[] | String>;
  Patientname_not_in?: Maybe<String[] | String>;
  Patientname_lt?: Maybe<String>;
  Patientname_lte?: Maybe<String>;
  Patientname_gt?: Maybe<String>;
  Patientname_gte?: Maybe<String>;
  Patientname_contains?: Maybe<String>;
  Patientname_not_contains?: Maybe<String>;
  Patientname_starts_with?: Maybe<String>;
  Patientname_not_starts_with?: Maybe<String>;
  Patientname_ends_with?: Maybe<String>;
  Patientname_not_ends_with?: Maybe<String>;
  PatientAddress?: Maybe<String>;
  PatientAddress_not?: Maybe<String>;
  PatientAddress_in?: Maybe<String[] | String>;
  PatientAddress_not_in?: Maybe<String[] | String>;
  PatientAddress_lt?: Maybe<String>;
  PatientAddress_lte?: Maybe<String>;
  PatientAddress_gt?: Maybe<String>;
  PatientAddress_gte?: Maybe<String>;
  PatientAddress_contains?: Maybe<String>;
  PatientAddress_not_contains?: Maybe<String>;
  PatientAddress_starts_with?: Maybe<String>;
  PatientAddress_not_starts_with?: Maybe<String>;
  PatientAddress_ends_with?: Maybe<String>;
  PatientAddress_not_ends_with?: Maybe<String>;
  PatientGender?: Maybe<String>;
  PatientGender_not?: Maybe<String>;
  PatientGender_in?: Maybe<String[] | String>;
  PatientGender_not_in?: Maybe<String[] | String>;
  PatientGender_lt?: Maybe<String>;
  PatientGender_lte?: Maybe<String>;
  PatientGender_gt?: Maybe<String>;
  PatientGender_gte?: Maybe<String>;
  PatientGender_contains?: Maybe<String>;
  PatientGender_not_contains?: Maybe<String>;
  PatientGender_starts_with?: Maybe<String>;
  PatientGender_not_starts_with?: Maybe<String>;
  PatientGender_ends_with?: Maybe<String>;
  PatientGender_not_ends_with?: Maybe<String>;
  PatientPhonenumber?: Maybe<String>;
  PatientPhonenumber_not?: Maybe<String>;
  PatientPhonenumber_in?: Maybe<String[] | String>;
  PatientPhonenumber_not_in?: Maybe<String[] | String>;
  PatientPhonenumber_lt?: Maybe<String>;
  PatientPhonenumber_lte?: Maybe<String>;
  PatientPhonenumber_gt?: Maybe<String>;
  PatientPhonenumber_gte?: Maybe<String>;
  PatientPhonenumber_contains?: Maybe<String>;
  PatientPhonenumber_not_contains?: Maybe<String>;
  PatientPhonenumber_starts_with?: Maybe<String>;
  PatientPhonenumber_not_starts_with?: Maybe<String>;
  PatientPhonenumber_ends_with?: Maybe<String>;
  PatientPhonenumber_not_ends_with?: Maybe<String>;
  PatientBloodgroup?: Maybe<String>;
  PatientBloodgroup_not?: Maybe<String>;
  PatientBloodgroup_in?: Maybe<String[] | String>;
  PatientBloodgroup_not_in?: Maybe<String[] | String>;
  PatientBloodgroup_lt?: Maybe<String>;
  PatientBloodgroup_lte?: Maybe<String>;
  PatientBloodgroup_gt?: Maybe<String>;
  PatientBloodgroup_gte?: Maybe<String>;
  PatientBloodgroup_contains?: Maybe<String>;
  PatientBloodgroup_not_contains?: Maybe<String>;
  PatientBloodgroup_starts_with?: Maybe<String>;
  PatientBloodgroup_not_starts_with?: Maybe<String>;
  PatientBloodgroup_ends_with?: Maybe<String>;
  PatientBloodgroup_not_ends_with?: Maybe<String>;
  PatientSymptoms?: Maybe<String>;
  PatientSymptoms_not?: Maybe<String>;
  PatientSymptoms_in?: Maybe<String[] | String>;
  PatientSymptoms_not_in?: Maybe<String[] | String>;
  PatientSymptoms_lt?: Maybe<String>;
  PatientSymptoms_lte?: Maybe<String>;
  PatientSymptoms_gt?: Maybe<String>;
  PatientSymptoms_gte?: Maybe<String>;
  PatientSymptoms_contains?: Maybe<String>;
  PatientSymptoms_not_contains?: Maybe<String>;
  PatientSymptoms_starts_with?: Maybe<String>;
  PatientSymptoms_not_starts_with?: Maybe<String>;
  PatientSymptoms_ends_with?: Maybe<String>;
  PatientSymptoms_not_ends_with?: Maybe<String>;
  Roomallocated?: Maybe<Boolean>;
  Roomallocated_not?: Maybe<Boolean>;
  Discharged?: Maybe<Boolean>;
  Discharged_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PatientinfoWhereInput[] | PatientinfoWhereInput>;
  OR?: Maybe<PatientinfoWhereInput[] | PatientinfoWhereInput>;
  NOT?: Maybe<PatientinfoWhereInput[] | PatientinfoWhereInput>;
}

export type PatientinfoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RoomallocateWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RoomallocateWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  Roomid?: Maybe<RoominfoWhereInput>;
  Personid?: Maybe<PatientinfoWhereInput>;
  Patientstatus?: Maybe<Boolean>;
  Patientstatus_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RoomallocateWhereInput[] | RoomallocateWhereInput>;
  OR?: Maybe<RoomallocateWhereInput[] | RoomallocateWhereInput>;
  NOT?: Maybe<RoomallocateWhereInput[] | RoomallocateWhereInput>;
}

export interface RoominfoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  Status?: Maybe<Boolean>;
  Status_not?: Maybe<Boolean>;
  AND?: Maybe<RoominfoWhereInput[] | RoominfoWhereInput>;
  OR?: Maybe<RoominfoWhereInput[] | RoominfoWhereInput>;
  NOT?: Maybe<RoominfoWhereInput[] | RoominfoWhereInput>;
}

export type RoominfoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface MedicationCreateInput {
  id?: Maybe<ID_Input>;
  Patient?: Maybe<PatientinfoCreateOneInput>;
  Medicalrounds?: Maybe<Int>;
  Discharge: Boolean;
}

export interface PatientinfoCreateOneInput {
  create?: Maybe<PatientinfoCreateInput>;
  connect?: Maybe<PatientinfoWhereUniqueInput>;
}

export interface PatientinfoCreateInput {
  id?: Maybe<ID_Input>;
  Patientname: String;
  PatientAddress: String;
  PatientGender: String;
  PatientPhonenumber: String;
  PatientBloodgroup: String;
  PatientSymptoms: String;
  Roomallocated: Boolean;
  Discharged: Boolean;
}

export interface MedicationUpdateInput {
  Patient?: Maybe<PatientinfoUpdateOneInput>;
  Medicalrounds?: Maybe<Int>;
  Discharge?: Maybe<Boolean>;
}

export interface PatientinfoUpdateOneInput {
  create?: Maybe<PatientinfoCreateInput>;
  update?: Maybe<PatientinfoUpdateDataInput>;
  upsert?: Maybe<PatientinfoUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PatientinfoWhereUniqueInput>;
}

export interface PatientinfoUpdateDataInput {
  Patientname?: Maybe<String>;
  PatientAddress?: Maybe<String>;
  PatientGender?: Maybe<String>;
  PatientPhonenumber?: Maybe<String>;
  PatientBloodgroup?: Maybe<String>;
  PatientSymptoms?: Maybe<String>;
  Roomallocated?: Maybe<Boolean>;
  Discharged?: Maybe<Boolean>;
}

export interface PatientinfoUpsertNestedInput {
  update: PatientinfoUpdateDataInput;
  create: PatientinfoCreateInput;
}

export interface MedicationUpdateManyMutationInput {
  Medicalrounds?: Maybe<Int>;
  Discharge?: Maybe<Boolean>;
}

export interface PatientinfoUpdateInput {
  Patientname?: Maybe<String>;
  PatientAddress?: Maybe<String>;
  PatientGender?: Maybe<String>;
  PatientPhonenumber?: Maybe<String>;
  PatientBloodgroup?: Maybe<String>;
  PatientSymptoms?: Maybe<String>;
  Roomallocated?: Maybe<Boolean>;
  Discharged?: Maybe<Boolean>;
}

export interface PatientinfoUpdateManyMutationInput {
  Patientname?: Maybe<String>;
  PatientAddress?: Maybe<String>;
  PatientGender?: Maybe<String>;
  PatientPhonenumber?: Maybe<String>;
  PatientBloodgroup?: Maybe<String>;
  PatientSymptoms?: Maybe<String>;
  Roomallocated?: Maybe<Boolean>;
  Discharged?: Maybe<Boolean>;
}

export interface RoomallocateCreateInput {
  id?: Maybe<ID_Input>;
  Roomid?: Maybe<RoominfoCreateOneInput>;
  Personid?: Maybe<PatientinfoCreateOneInput>;
  Patientstatus?: Maybe<Boolean>;
}

export interface RoominfoCreateOneInput {
  create?: Maybe<RoominfoCreateInput>;
  connect?: Maybe<RoominfoWhereUniqueInput>;
}

export interface RoominfoCreateInput {
  id?: Maybe<ID_Input>;
  Status: Boolean;
}

export interface RoomallocateUpdateInput {
  Roomid?: Maybe<RoominfoUpdateOneInput>;
  Personid?: Maybe<PatientinfoUpdateOneInput>;
  Patientstatus?: Maybe<Boolean>;
}

export interface RoominfoUpdateOneInput {
  create?: Maybe<RoominfoCreateInput>;
  update?: Maybe<RoominfoUpdateDataInput>;
  upsert?: Maybe<RoominfoUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<RoominfoWhereUniqueInput>;
}

export interface RoominfoUpdateDataInput {
  Status?: Maybe<Boolean>;
}

export interface RoominfoUpsertNestedInput {
  update: RoominfoUpdateDataInput;
  create: RoominfoCreateInput;
}

export interface RoomallocateUpdateManyMutationInput {
  Patientstatus?: Maybe<Boolean>;
}

export interface RoominfoUpdateInput {
  Status?: Maybe<Boolean>;
}

export interface RoominfoUpdateManyMutationInput {
  Status?: Maybe<Boolean>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
}

export interface MedicationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MedicationWhereInput>;
  AND?: Maybe<
    MedicationSubscriptionWhereInput[] | MedicationSubscriptionWhereInput
  >;
  OR?: Maybe<
    MedicationSubscriptionWhereInput[] | MedicationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    MedicationSubscriptionWhereInput[] | MedicationSubscriptionWhereInput
  >;
}

export interface PatientinfoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PatientinfoWhereInput>;
  AND?: Maybe<
    PatientinfoSubscriptionWhereInput[] | PatientinfoSubscriptionWhereInput
  >;
  OR?: Maybe<
    PatientinfoSubscriptionWhereInput[] | PatientinfoSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PatientinfoSubscriptionWhereInput[] | PatientinfoSubscriptionWhereInput
  >;
}

export interface RoomallocateSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoomallocateWhereInput>;
  AND?: Maybe<
    RoomallocateSubscriptionWhereInput[] | RoomallocateSubscriptionWhereInput
  >;
  OR?: Maybe<
    RoomallocateSubscriptionWhereInput[] | RoomallocateSubscriptionWhereInput
  >;
  NOT?: Maybe<
    RoomallocateSubscriptionWhereInput[] | RoomallocateSubscriptionWhereInput
  >;
}

export interface RoominfoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoominfoWhereInput>;
  AND?: Maybe<
    RoominfoSubscriptionWhereInput[] | RoominfoSubscriptionWhereInput
  >;
  OR?: Maybe<RoominfoSubscriptionWhereInput[] | RoominfoSubscriptionWhereInput>;
  NOT?: Maybe<
    RoominfoSubscriptionWhereInput[] | RoominfoSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Medication {
  id: ID_Output;
  Medicalrounds?: Int;
  Discharge: Boolean;
}

export interface MedicationPromise extends Promise<Medication>, Fragmentable {
  id: () => Promise<ID_Output>;
  Patient: <T = PatientinfoPromise>() => T;
  Medicalrounds: () => Promise<Int>;
  Discharge: () => Promise<Boolean>;
}

export interface MedicationSubscription
  extends Promise<AsyncIterator<Medication>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  Patient: <T = PatientinfoSubscription>() => T;
  Medicalrounds: () => Promise<AsyncIterator<Int>>;
  Discharge: () => Promise<AsyncIterator<Boolean>>;
}

export interface MedicationNullablePromise
  extends Promise<Medication | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  Patient: <T = PatientinfoPromise>() => T;
  Medicalrounds: () => Promise<Int>;
  Discharge: () => Promise<Boolean>;
}

export interface Patientinfo {
  id: ID_Output;
  Patientname: String;
  PatientAddress: String;
  PatientGender: String;
  PatientPhonenumber: String;
  PatientBloodgroup: String;
  PatientSymptoms: String;
  Roomallocated: Boolean;
  Discharged: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PatientinfoPromise extends Promise<Patientinfo>, Fragmentable {
  id: () => Promise<ID_Output>;
  Patientname: () => Promise<String>;
  PatientAddress: () => Promise<String>;
  PatientGender: () => Promise<String>;
  PatientPhonenumber: () => Promise<String>;
  PatientBloodgroup: () => Promise<String>;
  PatientSymptoms: () => Promise<String>;
  Roomallocated: () => Promise<Boolean>;
  Discharged: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PatientinfoSubscription
  extends Promise<AsyncIterator<Patientinfo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  Patientname: () => Promise<AsyncIterator<String>>;
  PatientAddress: () => Promise<AsyncIterator<String>>;
  PatientGender: () => Promise<AsyncIterator<String>>;
  PatientPhonenumber: () => Promise<AsyncIterator<String>>;
  PatientBloodgroup: () => Promise<AsyncIterator<String>>;
  PatientSymptoms: () => Promise<AsyncIterator<String>>;
  Roomallocated: () => Promise<AsyncIterator<Boolean>>;
  Discharged: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PatientinfoNullablePromise
  extends Promise<Patientinfo | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  Patientname: () => Promise<String>;
  PatientAddress: () => Promise<String>;
  PatientGender: () => Promise<String>;
  PatientPhonenumber: () => Promise<String>;
  PatientBloodgroup: () => Promise<String>;
  PatientSymptoms: () => Promise<String>;
  Roomallocated: () => Promise<Boolean>;
  Discharged: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MedicationConnection {
  pageInfo: PageInfo;
  edges: MedicationEdge[];
}

export interface MedicationConnectionPromise
  extends Promise<MedicationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MedicationEdge>>() => T;
  aggregate: <T = AggregateMedicationPromise>() => T;
}

export interface MedicationConnectionSubscription
  extends Promise<AsyncIterator<MedicationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MedicationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMedicationSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface MedicationEdge {
  node: Medication;
  cursor: String;
}

export interface MedicationEdgePromise
  extends Promise<MedicationEdge>,
    Fragmentable {
  node: <T = MedicationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MedicationEdgeSubscription
  extends Promise<AsyncIterator<MedicationEdge>>,
    Fragmentable {
  node: <T = MedicationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMedication {
  count: Int;
}

export interface AggregateMedicationPromise
  extends Promise<AggregateMedication>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMedicationSubscription
  extends Promise<AsyncIterator<AggregateMedication>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PatientinfoConnection {
  pageInfo: PageInfo;
  edges: PatientinfoEdge[];
}

export interface PatientinfoConnectionPromise
  extends Promise<PatientinfoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PatientinfoEdge>>() => T;
  aggregate: <T = AggregatePatientinfoPromise>() => T;
}

export interface PatientinfoConnectionSubscription
  extends Promise<AsyncIterator<PatientinfoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PatientinfoEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePatientinfoSubscription>() => T;
}

export interface PatientinfoEdge {
  node: Patientinfo;
  cursor: String;
}

export interface PatientinfoEdgePromise
  extends Promise<PatientinfoEdge>,
    Fragmentable {
  node: <T = PatientinfoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PatientinfoEdgeSubscription
  extends Promise<AsyncIterator<PatientinfoEdge>>,
    Fragmentable {
  node: <T = PatientinfoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePatientinfo {
  count: Int;
}

export interface AggregatePatientinfoPromise
  extends Promise<AggregatePatientinfo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePatientinfoSubscription
  extends Promise<AsyncIterator<AggregatePatientinfo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Roomallocate {
  id: ID_Output;
  Patientstatus?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RoomallocatePromise
  extends Promise<Roomallocate>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  Roomid: <T = RoominfoPromise>() => T;
  Personid: <T = PatientinfoPromise>() => T;
  Patientstatus: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RoomallocateSubscription
  extends Promise<AsyncIterator<Roomallocate>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  Roomid: <T = RoominfoSubscription>() => T;
  Personid: <T = PatientinfoSubscription>() => T;
  Patientstatus: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoomallocateNullablePromise
  extends Promise<Roomallocate | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  Roomid: <T = RoominfoPromise>() => T;
  Personid: <T = PatientinfoPromise>() => T;
  Patientstatus: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Roominfo {
  id: ID_Output;
  Status: Boolean;
}

export interface RoominfoPromise extends Promise<Roominfo>, Fragmentable {
  id: () => Promise<ID_Output>;
  Status: () => Promise<Boolean>;
}

export interface RoominfoSubscription
  extends Promise<AsyncIterator<Roominfo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  Status: () => Promise<AsyncIterator<Boolean>>;
}

export interface RoominfoNullablePromise
  extends Promise<Roominfo | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  Status: () => Promise<Boolean>;
}

export interface RoomallocateConnection {
  pageInfo: PageInfo;
  edges: RoomallocateEdge[];
}

export interface RoomallocateConnectionPromise
  extends Promise<RoomallocateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoomallocateEdge>>() => T;
  aggregate: <T = AggregateRoomallocatePromise>() => T;
}

export interface RoomallocateConnectionSubscription
  extends Promise<AsyncIterator<RoomallocateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoomallocateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoomallocateSubscription>() => T;
}

export interface RoomallocateEdge {
  node: Roomallocate;
  cursor: String;
}

export interface RoomallocateEdgePromise
  extends Promise<RoomallocateEdge>,
    Fragmentable {
  node: <T = RoomallocatePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoomallocateEdgeSubscription
  extends Promise<AsyncIterator<RoomallocateEdge>>,
    Fragmentable {
  node: <T = RoomallocateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRoomallocate {
  count: Int;
}

export interface AggregateRoomallocatePromise
  extends Promise<AggregateRoomallocate>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoomallocateSubscription
  extends Promise<AsyncIterator<AggregateRoomallocate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoominfoConnection {
  pageInfo: PageInfo;
  edges: RoominfoEdge[];
}

export interface RoominfoConnectionPromise
  extends Promise<RoominfoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoominfoEdge>>() => T;
  aggregate: <T = AggregateRoominfoPromise>() => T;
}

export interface RoominfoConnectionSubscription
  extends Promise<AsyncIterator<RoominfoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoominfoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoominfoSubscription>() => T;
}

export interface RoominfoEdge {
  node: Roominfo;
  cursor: String;
}

export interface RoominfoEdgePromise
  extends Promise<RoominfoEdge>,
    Fragmentable {
  node: <T = RoominfoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoominfoEdgeSubscription
  extends Promise<AsyncIterator<RoominfoEdge>>,
    Fragmentable {
  node: <T = RoominfoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRoominfo {
  count: Int;
}

export interface AggregateRoominfoPromise
  extends Promise<AggregateRoominfo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoominfoSubscription
  extends Promise<AsyncIterator<AggregateRoominfo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  username: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface MedicationSubscriptionPayload {
  mutation: MutationType;
  node: Medication;
  updatedFields: String[];
  previousValues: MedicationPreviousValues;
}

export interface MedicationSubscriptionPayloadPromise
  extends Promise<MedicationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MedicationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MedicationPreviousValuesPromise>() => T;
}

export interface MedicationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MedicationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MedicationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MedicationPreviousValuesSubscription>() => T;
}

export interface MedicationPreviousValues {
  id: ID_Output;
  Medicalrounds?: Int;
  Discharge: Boolean;
}

export interface MedicationPreviousValuesPromise
  extends Promise<MedicationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  Medicalrounds: () => Promise<Int>;
  Discharge: () => Promise<Boolean>;
}

export interface MedicationPreviousValuesSubscription
  extends Promise<AsyncIterator<MedicationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  Medicalrounds: () => Promise<AsyncIterator<Int>>;
  Discharge: () => Promise<AsyncIterator<Boolean>>;
}

export interface PatientinfoSubscriptionPayload {
  mutation: MutationType;
  node: Patientinfo;
  updatedFields: String[];
  previousValues: PatientinfoPreviousValues;
}

export interface PatientinfoSubscriptionPayloadPromise
  extends Promise<PatientinfoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PatientinfoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PatientinfoPreviousValuesPromise>() => T;
}

export interface PatientinfoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PatientinfoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PatientinfoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PatientinfoPreviousValuesSubscription>() => T;
}

export interface PatientinfoPreviousValues {
  id: ID_Output;
  Patientname: String;
  PatientAddress: String;
  PatientGender: String;
  PatientPhonenumber: String;
  PatientBloodgroup: String;
  PatientSymptoms: String;
  Roomallocated: Boolean;
  Discharged: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PatientinfoPreviousValuesPromise
  extends Promise<PatientinfoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  Patientname: () => Promise<String>;
  PatientAddress: () => Promise<String>;
  PatientGender: () => Promise<String>;
  PatientPhonenumber: () => Promise<String>;
  PatientBloodgroup: () => Promise<String>;
  PatientSymptoms: () => Promise<String>;
  Roomallocated: () => Promise<Boolean>;
  Discharged: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PatientinfoPreviousValuesSubscription
  extends Promise<AsyncIterator<PatientinfoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  Patientname: () => Promise<AsyncIterator<String>>;
  PatientAddress: () => Promise<AsyncIterator<String>>;
  PatientGender: () => Promise<AsyncIterator<String>>;
  PatientPhonenumber: () => Promise<AsyncIterator<String>>;
  PatientBloodgroup: () => Promise<AsyncIterator<String>>;
  PatientSymptoms: () => Promise<AsyncIterator<String>>;
  Roomallocated: () => Promise<AsyncIterator<Boolean>>;
  Discharged: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoomallocateSubscriptionPayload {
  mutation: MutationType;
  node: Roomallocate;
  updatedFields: String[];
  previousValues: RoomallocatePreviousValues;
}

export interface RoomallocateSubscriptionPayloadPromise
  extends Promise<RoomallocateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RoomallocatePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoomallocatePreviousValuesPromise>() => T;
}

export interface RoomallocateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoomallocateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoomallocateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoomallocatePreviousValuesSubscription>() => T;
}

export interface RoomallocatePreviousValues {
  id: ID_Output;
  Patientstatus?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RoomallocatePreviousValuesPromise
  extends Promise<RoomallocatePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  Patientstatus: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RoomallocatePreviousValuesSubscription
  extends Promise<AsyncIterator<RoomallocatePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  Patientstatus: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoominfoSubscriptionPayload {
  mutation: MutationType;
  node: Roominfo;
  updatedFields: String[];
  previousValues: RoominfoPreviousValues;
}

export interface RoominfoSubscriptionPayloadPromise
  extends Promise<RoominfoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RoominfoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoominfoPreviousValuesPromise>() => T;
}

export interface RoominfoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoominfoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoominfoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoominfoPreviousValuesSubscription>() => T;
}

export interface RoominfoPreviousValues {
  id: ID_Output;
  Status: Boolean;
}

export interface RoominfoPreviousValuesPromise
  extends Promise<RoominfoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  Status: () => Promise<Boolean>;
}

export interface RoominfoPreviousValuesSubscription
  extends Promise<AsyncIterator<RoominfoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  Status: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Patientinfo",
    embedded: false
  },
  {
    name: "Roominfo",
    embedded: false
  },
  {
    name: "Roomallocate",
    embedded: false
  },
  {
    name: "Medication",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
